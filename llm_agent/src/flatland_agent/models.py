from pydantic import BaseModel, Field
from typing import List, Optional


class TourStop(BaseModel):
    location: str = Field(..., description="Codepunkt/Ort des Halts")
    time: int = Field(..., description="Zeitpunkt der Ankunft/Durchfahrt")


class AgentTour(BaseModel):
    agent_id: str = Field(..., description="ID oder Name der Zugfahrt, z.B. A, B, C")
    stops: List[TourStop] = Field(..., description="Liste der Halte mit Zeiten")
    target: str = Field(..., description="Ziel-Codepunkt")
    latest_arrival: int = Field(..., description="Sp채teste erlaubte Ankunftszeit am Ziel")


class Variant(BaseModel):
    tours: List[AgentTour] = Field(..., description="Alle Agenten/Zugfahrten f체r diese Variante")


class InvokeRequest(BaseModel):
    """Request model for invoking the planner agent with multiple tour variants.

    Attributes:
    ----------
    variants : List[Variant]
        Jede Variante enth채lt die Touren aller Agenten/Zugfahrten.
    """
    variants: List[Variant] = Field(..., description="Liste von Varianten, jede mit Agenten-Touren")


class ContextMessage(BaseModel):
    role: str
    text: str


class Context(BaseModel):
    """Request model for context messages."""
    context: List[ContextMessage]


class PromptRequest(BaseModel):
    """Request model for prompting the coordinator agent.

    Attributes:
    ----------
    prompt : str
        The prompt string to be processed.
    context : Optional[Context]
        The context for the prompt, if any. Defaults to None.
    """
    prompt: str
    context: Optional[List[ContextMessage]] = None


class CoordinatorResponse(BaseModel):
    """Represents the response from the coordinator agent.

    Attributes:
        intent (str): The intent of the user.
    """
    intent: str= Field(description="Die Absicht des Benutzers")


class LanguageAgentResponse(BaseModel):
    """Represents the response from the language agent.

    Attributes:
        response (str): The response generated by the agent.
    """
    response: str = Field(description="Die Antwort des Agenten auf die Anfrage")


class FlatlandResponse(BaseModel):
    """Represents the response from the flatland agent.

    Attributes:
        variant_id (int): The ID of the variant selected by the agent.
    """
    variant_id: int = Field(description="Die ID der Variante, die der Agent ausgew채hlt hat.")


class AgentState(BaseModel):
    """Represents the state of the agents.

    Attributes:
        prompt (str): The user's prompt.
        intent (str): The determined intent(s) for processing.
        response (str): The response generated by the agent.
        context (dict | None): The context for the request, if any.
    """
    prompt: str
    context: str = ""
    intent: str = ""
    response: str = ""
    variant_id: int = None
